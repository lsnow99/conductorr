package series

import (
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"time"

	"github.com/lsnow99/conductorr/internal/conductorr/settings"
)

type TMDB struct{}

type TMDBShowResult struct {
	TvResults []struct {
		GenreIds         []int    `json:"genre_ids"`
		OriginalLanguage string   `json:"original_language"`
		PosterPath       string   `json:"poster_path"`
		VoteCount        int      `json:"vote_count"`
		Name             string   `json:"name"`
		VoteAverage      float64  `json:"vote_average"`
		Overview         string   `json:"overview"`
		FirstAirDate     string   `json:"first_air_date"`
		OriginalName     string   `json:"original_name"`
		OriginCountry    []string `json:"origin_country"`
		ID               int      `json:"id"`
		BackdropPath     string   `json:"backdrop_path"`
		Popularity       float64  `json:"popularity"`
	} `json:"tv_results"`
}

type TMDBShow struct {
	BackdropPath string `json:"backdrop_path"`
	CreatedBy    []struct {
		ID          int         `json:"id"`
		CreditID    string      `json:"credit_id"`
		Name        string      `json:"name"`
		Gender      int         `json:"gender"`
		ProfilePath interface{} `json:"profile_path"`
	} `json:"created_by"`
	EpisodeRunTime []int  `json:"episode_run_time"`
	FirstAirDate   string `json:"first_air_date"`
	Genres         []struct {
		ID   int    `json:"id"`
		Name string `json:"name"`
	} `json:"genres"`
	Homepage         string   `json:"homepage"`
	ID               int      `json:"id"`
	InProduction     bool     `json:"in_production"`
	Languages        []string `json:"languages"`
	LastAirDate      string   `json:"last_air_date"`
	LastEpisodeToAir struct {
		AirDate        string  `json:"air_date"`
		EpisodeNumber  int     `json:"episode_number"`
		ID             int     `json:"id"`
		Name           string  `json:"name"`
		Overview       string  `json:"overview"`
		ProductionCode string  `json:"production_code"`
		SeasonNumber   int     `json:"season_number"`
		StillPath      string  `json:"still_path"`
		VoteAverage    float64 `json:"vote_average"`
		VoteCount      int     `json:"vote_count"`
	} `json:"last_episode_to_air"`
	Name             string `json:"name"`
	NextEpisodeToAir struct {
		AirDate        string  `json:"air_date"`
		EpisodeNumber  int     `json:"episode_number"`
		ID             int     `json:"id"`
		Name           string  `json:"name"`
		Overview       string  `json:"overview"`
		ProductionCode string  `json:"production_code"`
		SeasonNumber   int     `json:"season_number"`
		StillPath      string  `json:"still_path"`
		VoteAverage    float64 `json:"vote_average"`
		VoteCount      int     `json:"vote_count"`
	} `json:"next_episode_to_air"`
	Networks []struct {
		Name          string `json:"name"`
		ID            int    `json:"id"`
		LogoPath      string `json:"logo_path"`
		OriginCountry string `json:"origin_country"`
	} `json:"networks"`
	NumberOfEpisodes    int      `json:"number_of_episodes"`
	NumberOfSeasons     int      `json:"number_of_seasons"`
	OriginCountry       []string `json:"origin_country"`
	OriginalLanguage    string   `json:"original_language"`
	OriginalName        string   `json:"original_name"`
	Overview            string   `json:"overview"`
	Popularity          float64  `json:"popularity"`
	PosterPath          string   `json:"poster_path"`
	ProductionCompanies []struct {
		ID            int    `json:"id"`
		LogoPath      string `json:"logo_path"`
		Name          string `json:"name"`
		OriginCountry string `json:"origin_country"`
	} `json:"production_companies"`
	ProductionCountries []struct {
		Iso31661 string `json:"iso_3166_1"`
		Name     string `json:"name"`
	} `json:"production_countries"`
	Seasons []struct {
		AirDate      string `json:"air_date"`
		EpisodeCount int    `json:"episode_count"`
		ID           int    `json:"id"`
		Name         string `json:"name"`
		Overview     string `json:"overview"`
		PosterPath   string `json:"poster_path"`
		SeasonNumber int    `json:"season_number"`
	} `json:"seasons"`
	SpokenLanguages []struct {
		EnglishName string `json:"english_name"`
		Iso6391     string `json:"iso_639_1"`
		Name        string `json:"name"`
	} `json:"spoken_languages"`
	Status      string  `json:"status"`
	Tagline     string  `json:"tagline"`
	Type        string  `json:"type"`
	VoteAverage float64 `json:"vote_average"`
	VoteCount   int     `json:"vote_count"`
}

type TMDBEpisode struct {
	AirDate       string `json:"air_date"`
	EpisodeNumber int    `json:"episode_number"`
	Crew          []struct {
		Job                string      `json:"job"`
		Department         string      `json:"department"`
		CreditID           string      `json:"credit_id"`
		Adult              bool        `json:"adult"`
		Gender             int         `json:"gender"`
		ID                 int         `json:"id"`
		KnownForDepartment string      `json:"known_for_department"`
		Name               string      `json:"name"`
		OriginalName       string      `json:"original_name"`
		Popularity         float64     `json:"popularity"`
		ProfilePath        interface{} `json:"profile_path"`
	} `json:"crew"`
	GuestStars []struct {
		Character          string  `json:"character"`
		CreditID           string  `json:"credit_id"`
		Order              int     `json:"order"`
		Adult              bool    `json:"adult"`
		Gender             int     `json:"gender"`
		ID                 int     `json:"id"`
		KnownForDepartment string  `json:"known_for_department"`
		Name               string  `json:"name"`
		OriginalName       string  `json:"original_name"`
		Popularity         float64 `json:"popularity"`
		ProfilePath        string  `json:"profile_path"`
	} `json:"guest_stars"`
	ID             int     `json:"id"`
	Name           string  `json:"name"`
	Overview       string  `json:"overview"`
	ProductionCode string  `json:"production_code"`
	SeasonNumber   int     `json:"season_number"`
	StillPath      string  `json:"still_path"`
	VoteAverage    float64 `json:"vote_average"`
	VoteCount      int     `json:"vote_count"`
}

type TMDBSeason struct {
	AirDate      string        `json:"air_date"`
	Episodes     []TMDBEpisode `json:"episodes"`
	Name         string        `json:"name"`
	Overview     string        `json:"overview"`
	ID           int           `json:"id"`
	PosterPath   string        `json:"poster_path"`
	SeasonNumber int           `json:"season_number"`
}

func (t *TMDB) GetEpisodes(imdbID string) ([]Episode, error) {
	id, err := t.getShowID(imdbID)
	if err != nil {
		return nil, err
	}

	u := url.URL{}
	u.Scheme = "https"
	u.Host = "api.themoviedb.org"
	u.Path = "shows/" + strconv.Itoa(id) + "/episodes"

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	show := TMDBShow{}
	err = json.NewDecoder(resp.Body).Decode(&show)
	if err != nil {
		return nil, err
	}

	var runtime int
	if len(show.EpisodeRunTime) > 0 {
		runtime = show.EpisodeRunTime[0]
	}

	episodes := make([]Episode, 0)

	for _, season := range show.Seasons {
		seasonEpisodes, err := t.getEpisodesForSeason(id, season.SeasonNumber)
		if err != nil {
			return nil, err
		}
		for _, seasonEpisode := range seasonEpisodes {
			episodes = append(episodes, Episode{
				ImdbID:      "",
				Title:       seasonEpisode.Name,
				Description: seasonEpisode.Overview,
				Runtime:     runtime,
				Season:      season.SeasonNumber,
				Episode:     seasonEpisode.EpisodeNumber,
				Aired:       time.Parse(seasonEpisode.AirDate),
			})
		}
	}

	return episodes, nil
}

func (t *TMDB) getEpisodesForSeason(showID, seasonNum int) ([]TMDBEpisode, error) {
	u := url.URL{}
	u.Scheme = "https"
	u.Host = "api.themoviedb.org"
	u.Path = fmt.Sprintf("tv/%d/season/%d", showID, seasonNum)
	q := u.Query()
	q.Set("api_key", settings.TmdbAPIKey)
	u.RawQuery = q.Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	season := TMDBSeason{}
	if err := json.NewDecoder(resp.Body).Decode(&season); err != nil {
		return nil, err
	}
	return season.Episodes, nil
}

func (t *TMDB) getShowID(imdbID string) (int, error) {
	u := url.URL{}
	u.Scheme = "https"
	u.Host = "api.themoviedb.org"
	u.Path = "find/" + imdbID
	q := u.Query()
	q.Set("api_key", settings.TmdbAPIKey)
	u.RawQuery = q.Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return 0, err
	}

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return 0, err
	}
	defer resp.Body.Close()

	sr := TMDBShowResult{}
	if err := json.NewDecoder(resp.Body).Decode(&sr); err != nil {
		return 0, err
	}
	if len(sr.TvResults) == 0 {
		return 0, fmt.Errorf("no results for show with imdb %s", imdbID)
	}
	return sr.TvResults[0].ID, nil
}
